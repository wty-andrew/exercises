(defvar *canvas* (chain document (get-element-by-id "canvas")))
(defvar *ctx* (chain *canvas* (get-context "2d")))
(defvar *width* (@ window inner-width))
(defvar *height* (@ window inner-height))
(setf (@ *canvas* width) *width*
      (@ *canvas* height) *height*)
(var width *width*)
(var height *height*)

;; utils
(defmacro exports (&rest args)
  "Make args available in global scope."
  `(setf ,@(mapcan #'(lambda (arg)
                       `((chain window ,arg) ,arg))
                   args)))

;; canvas
(defmacro ctx (fn &rest args)
  `(chain *ctx* (,fn ,@args)))

(defmacro ctx-get (attr)
  `(@ *ctx* ,attr))

(defmacro clear ()
  `(ctx clear-rect 0 0 *width* *height*))

(defmacro with-context (&body body)
  `(progn
     (ctx save)
     ,@body
     (ctx restore)))

(defmacro def-animation-loop (name &body body)
  `(defun ,name ()
     (clear)
     ,@body
     (request-animation-frame ,name)))

;; vector
(defun make-vector (&optional (x 0) (y 0))
  (create x x y y))

(defmacro vec-x (vec)
  `(@ ,vec x))

(defsetf vec-x (vec) (value)
  `(setf (@ ,vec x) ,value))

(defmacro vec-y (vec)
  `(@ ,vec y))

(defsetf vec-y (vec) (value)
  `(setf (@ ,vec y) ,value))

(defun vec-angle (vec)
  (chain *math (atan2 (vec-y vec) (vec-x vec))))

(defsetf vec-angle (vec) (angle)
  `(let ((length (vec-length ,vec)))
     (setf (vec-x ,vec) (* (cos ,angle) length)
           (vec-y ,vec) (* (sin ,angle) length))))

(defun vec-length (vec)
  (sqrt (+ (* (vec-x vec) (vec-x vec))
           (* (vec-y vec) (vec-y vec)))))

(defsetf vec-length (vec) (length)
  `(let ((angle (vec-angle ,vec)))
     (setf (vec-x ,vec) (* (cos angle) ,length)
           (vec-y ,vec) (* (sin angle) ,length))))

(defun v+ (v1 v2)
  (make-vector (+ (vec-x v1) (vec-x v2))
               (+ (vec-y v1) (vec-y v2))))

(defun v- (v1 v2)
  (make-vector (- (vec-x v1) (vec-x v2))
               (- (vec-y v1) (vec-y v2))))

(defun v* (v scalar)
  (make-vector (* (vec-x v) scalar)
               (* (vec-y v) scalar)))

(defun v/ (v scalar)
  (v* v (/ 1 scalar)))

(defun v+! (v1 v2)
  (incf (vec-x v1) (vec-x v2))
  (incf (vec-y v1) (vec-y v2)))

(defun v-! (v1 v2)
  (decf (vec-x v1) (vec-x v2))
  (decf (vec-y v1) (vec-y v2)))

(defun v*! (v scalar)
  (setf (vec-x v) (* (vec-x v) scalar)
        (vec-y v) (* (vec-y v) scalar)))

(defun v/! (v scalar)
  (v*! v (/ 1 scalar)))

;; particle
(defun make-particle (x y speed direction &optional (gravity 0) (mass 1))
  (let ((position (make-vector x y))
        (velocity (make-vector 0 0)))
    (setf (vec-length velocity) speed
          (vec-angle velocity) direction)
    (create position position
            velocity velocity
            mass mass
            gravity (make-vector 0 gravity)
            update #'(lambda ()
                       (v+! (@ this velocity) (@ this gravity))
                       (v+! (@ this position) (@ this velocity)))
            accelerate #'(lambda (accel) (v+! (@ this velocity) accel))
            angle-to #'(lambda (p2) (chain *math (atan2 (- (vec-y (@ p2 position))
                                                           (vec-y (@ this position)))
                                                        (- (vec-x (@ p2 position))
                                                           (vec-x (@ this position))))))
            distance-to #'(lambda (p2)
                            (let ((dx (- (vec-x (@ p2 position)) (vec-x (@ this position))))
                                  (dy (- (vec-y (@ p2 position)) (vec-y (@ this position)))))
                              (sqrt (+ (* dx dx) (* dy dy)))))
            gravitate-to #'(lambda (p2)
                             (let ((grav (make-vector 0 0))
                                   (dist (chain this (distance-to p2))))
                               (setf (vec-length grav) (/ (@ p2 mass) (* dist dist))
                                     (vec-angle grav) (chain this (angle-to p2)))
                               (v+! (@ this velocity) grav))))))

(defun ep-1 ()
  "Introduction"
  (dotimes (_ 100)
    (ctx begin-path)
    (ctx move-to (* (random) width) (* (random) height))
    (ctx line-to (* (random) width) (* (random) height))
    (ctx stroke)))

(defun ep-2 ()
  "Intro to Trigonometry"
  (ctx translate 0 (/ height 2))
  (ctx scale 1 -1)
  (do ((angle 0 (+ angle 0.01)))
      ((>= angle (* pi 2)))
    (ctx fill-rect (* angle (/ width (* 2 pi))) (* (sin angle) (/ width (* 2 pi))) 5 5)))

(defun ep-3 ()
  "More Trigonometry"
  (let ((center-y (* height 0.5))
        (center-x (* width 0.5))
        (base-radius 50)
        (base-alpha 0.5)
        (offset-height (* height 0.4))
        (offset-radius 30)
        (offset-alpha 0.5)
        (speed 0.1)
        (angle 0))
    (def-animation-loop render
      (setf y (+ center-y (* (sin angle) offset-height))
            radius (+ base-radius (* (sin (/ angle 2)) offset-radius))
            alpha (+ base-alpha (* (sin (/ angle 2)) offset-alpha))
            (ctx-get fill-style) (concatenate 'string "rgba(0, 0, 0, " alpha ")"))
      (clear)
      (ctx begin-path)
      (ctx arc center-x y radius 0 (* pi 2) false)
      (ctx fill)
      (incf angle speed))
    (render)))

(defun ep-4 ()
  "Circles, Ellipses and Lissajous Curves"
  (let ((center-x (/ width 2))
        (center-y (/ height 2))
        (x-radius (/ width 6))
        (y-radius (/ height 3))
        (x-angle 0)
        (y-angle 0)
        (x-speed 0.1)
        (y-speed 0.131)
        x y)
    (def-animation-loop render
      (setf x (+ center-x (* (cos x-angle) x-radius))
            y (+ center-y (* (sin y-angle) y-radius)))
      (ctx begin-path)
      (ctx arc x y 10 0 (* pi 2) false)
      (ctx fill)
      (incf x-angle x-speed)
      (incf y-angle y-speed))
    (render)))


(defun ep-5 ()
  "Arctangent"
  (let ((center-x (/ width 2))
        (center-y (/ height 2))
        (arrow-x (/ width 2))
        (arrow-y (/ height 2))
        (x-angle 0)
        (y-angle 0)
        (x-speed 0.01)
        (y-speed 0.02)
        dx
        dy
        (angle 0))
    (def-animation-loop render
      (setf arrow-x (+ center-x (* (cos x-angle) (/ width 6)))
            arrow-y (+ center-y (* (sin y-angle) (/ height 3))))
      (with-context ()
        (ctx translate arrow-x arrow-y)
        (ctx rotate angle)
        (ctx begin-path)
        (ctx move-to 20 0)
        (ctx line-to -20 0)
        (ctx move-to 20 0)
        (ctx line-to 10 -10)
        (ctx move-to 20 0)
        (ctx line-to 10 10)
        (ctx stroke))
      (incf x-angle x-speed)
      (incf y-angle y-speed))
    (chain document body (add-event-listener
                          "mousemove"
                          #'(lambda (evt)
                              (setf dx (- (@ evt client-x) arrow-x)
                                    dy (- (@ evt client-y) arrow-y)
                                    angle (chain *math (atan2 dy dx))))))
    (render)))

(defun ep-6 ()
  "Vectors, Part I")

(defun ep-7 ()
  "Vectors, Part II"
  (setf v (make-vector 10 5))
  (chain console (log (vec-x v)))
  (chain console (log (vec-y v)))
  (chain console (log (vec-angle v)))
  (chain console (log (vec-length v)))
  (setf (vec-angle v) (/ pi 6))
  (setf (vec-length v) 100)
  (chain console (log (vec-x v)))
  (chain console (log (vec-y v)))

  (setf v1 (make-vector 10 5)
        v2 (make-vector 3 4)
        v3 (v+ v1 v2))
  (chain console (log (vec-x v3)))
  (chain console (log (vec-y v3)))

  (setf v1 (make-vector 10 5)
        v2 (v* v1 2))
  (chain console (log (vec-length v1)))
  (chain console (log (vec-length v2)))

  (setf v1 (make-vector 10 5)
        v2 (make-vector 3 4))
  (v+! v1 v2)
  (chain console (log (vec-x v1) (vec-y v1))))

(defun ep-8 ()
  "Velocity"
  (let* ((num-particles 100)
         (particles (loop repeat num-particles
                          collect (make-particle
                                   (/ width 2)
                                   (/ height 2)
                                   (1+ (* (random) 4))
                                   (1+ (* (random) pi 2))))))
    (def-animation-loop update
      (dolist (p particles)
        (chain p (update))
        (ctx begin-path)
        (ctx arc (vec-x (@ p position)) (vec-y (@ p position)) 10 0 (* pi 2) false)
        (ctx fill)))
    (update)))

(defun ep-9 ()
  "Acceleration"
  (let* ((num-particles 100)
         (particles (loop repeat num-particles
                          collect (make-particle
                                   (/ width 2)
                                   (/ height 3)
                                   (+ (* (random) 5) 2)
                                   (1+ (* (random) pi 2))
                                   0.1))))
    (def-animation-loop update
      (dolist (p particles)
        (chain p (update))
        (ctx begin-path)
        (ctx arc (vec-x (@ p position)) (vec-y (@ p position)) 4 0 (* pi 2) false)
        (ctx fill)))
    (update)))

(defun ep-10 ()
  "Advanced Acceleration"
  (let ((ship (make-particle (/ width 2) (/ height 2) 0 0))
        (thrust (make-vector 0 0))
        (angle 0)
        (turing-left nil)
        (turing-right nil)
        (thrusting nil))
    (chain document body (add-event-listener
                          "keydown"
                          #'(lambda (evt)
                              (case (@ evt key-code)
                                (38 (setf thrusting t)) ; up
                                (37 (setf turing-left t)) ; left
                                (39 (setf turing-right t)))))) ; right
    (chain document body (add-event-listener
                          "keyup"
                          #'(lambda (evt)
                              (case (@ evt key-code)
                                (38 (setf thrusting nil))
                                (37 (setf turing-left nil))
                                (39 (setf turing-right nil))))))
    (def-animation-loop update
      (when turing-left
        (decf angle 0.05))
      (when turing-right
        (incf angle 0.05))
      (setf (vec-angle thrust) angle
            (vec-length thrust) (if thrusting 0.1 0))
      (chain ship (accelerate thrust))
      (chain ship (update))
      (with-context
        (ctx translate (vec-x (@ ship position)) (vec-y (@ ship position)))
        (ctx rotate angle)
        (ctx begin-path)
        (ctx move-to 10 0)
        (ctx line-to -10 -7)
        (ctx line-to -10 7)
        (ctx line-to 10 0)
        (when thrusting
          (ctx move-to -10 0)
          (ctx line-to -18 0))
        (ctx stroke))
      (when (> (vec-x (@ ship position)) width)
        (setf (vec-x (@ ship position)) 0))
      (when (< (vec-x (@ ship position)) 0)
        (setf (vec-x (@ ship position)) width))
      (when (> (vec-y (@ ship position)) height)
        (setf (vec-y (@ ship position)) 0))
      (when (< (vec-y (@ ship position)) 0)
        (setf (vec-y (@ ship position)) height)))
    (update)))

(defun ep-11 ()
  "Gravity"
  (let ((sun (make-particle (/ width 2) (/ height 2) 0 0 0 20000))
        (planet (make-particle (+ (/ width 2) 200) (/ height 2) 10 (/ pi -2))))
    (def-animation-loop update
      (chain planet (gravitate-to sun))
      (chain planet (update))
      (ctx begin-path)
      (setf (ctx-get fill-style) "#ffff00")
      (ctx arc (vec-x (@ sun position)) (vec-y (@ sun position)) 20 0 (* pi 2) false)
      (ctx fill)
      (ctx begin-path)
      (setf (ctx-get fill-style) "#0000ff")
      (ctx arc (vec-x (@ planet position)) (vec-y (@ planet position)) 5 0 (* pi 2) false)
      (ctx fill))
    (update)))

(setf (@ window onload) ep-11)
