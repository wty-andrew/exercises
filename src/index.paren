(defmacro exports (&rest args)
  "Make args available in global scope."
  `(setf ,@(mapcan #'(lambda (arg)
                       `((chain window ,arg) ,arg))
                   args)))

(defvar *canvas* (chain document (get-element-by-id "canvas")))
(defvar *ctx* (chain *canvas* (get-context "2d")))
(defvar *width* (@ window inner-width))
(defvar *height* (@ window inner-height))
(setf (@ *canvas* width) *width*
      (@ *canvas* height) *height*)
(var width *width*)
(var height *height*)

(defmacro ctx (fn &rest args)
  `(chain *ctx* (,fn ,@args)))

(defmacro ctx-get (attr)
  `(@ *ctx* ,attr))

(defmacro clear ()
  `(ctx clear-rect 0 0 *width* *height*))

(defmacro with-context (&body body)
  `(progn
     (ctx save)
     ,@body
     (ctx restore)))

(defun ep-1 ()
  "Introduction"
  (dotimes (_ 100)
    (ctx begin-path)
    (ctx move-to (* (random) width) (* (random) height))
    (ctx line-to (* (random) width) (* (random) height))
    (ctx stroke)))

(defun ep-2 ()
  "Intro to Trigonometry"
  (ctx translate 0 (/ height 2))
  (ctx scale 1 -1)
  (do ((angle 0 (+ angle 0.01)))
      ((>= angle (* pi 2)))
    (ctx fill-rect (* angle (/ width (* 2 pi))) (* (sin angle) (/ width (* 2 pi))) 5 5)))

(defun ep-3 ()
  "More Trigonometry"
  (let ((center-y (* height 0.5))
        (center-x (* width 0.5))
        (base-radius 50)
        (base-alpha 0.5)
        (offset-height (* height 0.4))
        (offset-radius 30)
        (offset-alpha 0.5)
        (speed 0.1)
        (angle 0))
    (labels ((render ()
               (setf y (+ center-y (* (sin angle) offset-height))
                     radius (+ base-radius (* (sin (/ angle 2)) offset-radius))
                     alpha (+ base-alpha (* (sin (/ angle 2)) offset-alpha))
                     (ctx-get fill-style) (concatenate 'string "rgba(0, 0, 0, " alpha ")"))
               (clear)
               (ctx begin-path)
               (ctx arc center-x y radius 0 (* pi 2) false)
               (ctx fill)
               (incf angle speed)
               (request-animation-frame render)))
      (render))))

(defun ep-4 ()
  "Circles, Ellipses and Lissajous Curves"
  (let ((center-x (/ width 2))
        (center-y (/ height 2))
        (x-radius (/ width 6))
        (y-radius (/ height 3))
        (x-angle 0)
        (y-angle 0)
        (x-speed 0.1)
        (y-speed 0.131)
        x y)
    (labels ((render ()
               (clear)
               (setf x (+ center-x (* (cos x-angle) x-radius))
                     y (+ center-y (* (sin y-angle) y-radius)))
               (ctx begin-path)
               (ctx arc x y 10 0 (* pi 2) false)
               (ctx fill)
               (incf x-angle x-speed)
               (incf y-angle y-speed)
               (request-animation-frame render)))
      (render))))


(defun ep-5 ()
  "Arctangent"
  (let ((center-x (/ width 2))
        (center-y (/ height 2))
        (arrow-x (/ width 2))
        (arrow-y (/ height 2))
        (x-angle 0)
        (y-angle 0)
        (x-speed 0.01)
        (y-speed 0.02)
        dx
        dy
        (angle 0))
    (labels ((render ()
               (clear)
               (setf arrow-x (+ center-x (* (cos x-angle) (/ width 6)))
                     arrow-y (+ center-y (* (sin y-angle) (/ height 3))))
               (with-context ()
                 (ctx translate arrow-x arrow-y)
                 (ctx rotate angle)
                 (ctx begin-path)
                 (ctx move-to 20 0)
                 (ctx line-to -20 0)
                 (ctx move-to 20 0)
                 (ctx line-to 10 -10)
                 (ctx move-to 20 0)
                 (ctx line-to 10 10)
                 (ctx stroke))
               (incf x-angle x-speed)
               (incf y-angle y-speed)
               (request-animation-frame render)))
      (chain document body (add-event-listener
                            "mousemove"
                            #'(lambda (evt)
                                (setf dx (- (@ evt client-x) arrow-x)
                                      dy (- (@ evt client-y) arrow-y)
                                      angle (chain *math (atan2 dy dx))))))
      (render))))

(setf (@ window onload) ep-5)
