(defun make-particle (x y speed direction &optional (gravity 0))
  (create x x
          y y
          vx (* (cos direction) speed)
          vy (* (sin direction) speed)
          mass 1
          radius 0
          bounce -1
          friction 1
          gravity gravity))

(defmacro particle-x (p)
  `(@ ,p x))

(defmacro particle-y (p)
  `(@ ,p y))

(defmacro particle-vx (p)
  `(@ ,p vx))

(defmacro particle-vy (p)
  `(@ ,p vy))

(defmacro particle-mass (p)
  `(@ ,p mass))

(defmacro particle-radius (p)
  `(@ ,p radius))

(defmacro particle-bounce (p)
  `(@ ,p bounce))

(defmacro particle-grav (p)
  `(@ ,p gravity))

(defmacro particle-friction (p)
  `(@ ,p friction))

(defun particle-update! (p)
  (with-slots (x y vx vy gravity friction) p
    (setf vx (* vx friction)
          vy (+ (* vy friction) gravity)
          x (+ x vx)
          y (+ y vy))))

(defun particle-accelerate! (p accel)
  (incf (particle-vx p) (vec-x accel))
  (incf (particle-vy p) (vec-y accel)))

(defun particle-gravitate-to! (p1 p2)
  (let* ((dx (- (particle-x p2) (particle-x p1)))
         (dy (- (particle-y p2) (particle-y p1)))
         (dist-sq (+ (* dx dx) (* dy dy)))
         (dist (sqrt dist-sq))
         (force (/ (particle-mass p2) dist-sq))
         (ax (* (/ dx dist) force))
         (ay (* (/ dy dist) force)))
    (incf (particle-vx p1) ax)
    (incf (particle-vy p1) ay)))

(exports make-particle particle-update! particle-accelerate! particle-gravitate-to!)
