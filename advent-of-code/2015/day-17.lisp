(uiop:define-package #:advent-of-code/2015/day-17
  (:use #:cl #:aoc-utils)
  (:export #:day-17/p1 #:day-17/p2))

(in-package #:advent-of-code/2015/day-17)

(defun read-containers ()
  (sort (str->form (puzzle-file->string "2015/data/17.txt")) #'>))

(defun day-17/p1 ()
  (labels ((aux (containers liters)
             (cond ((zerop liters) 1)
                   ((or (null containers) (< liters 0)) 0)
                   (t (+ (aux (cdr containers) (- liters (car containers)))
                         (aux (cdr containers) liters))))))
    (aux (read-containers) 150)))

(defun day-17/p2 ()
  (let* ((containers (coerce (read-containers) 'vector))
         (length (length containers))
         (solutions nil))
    ;; keep track of the containers being used in the table (bit-array)
    (labels ((copy-and-mark (table idx)
               (let ((copy (copy-seq table)))
                 (setf (aref copy idx) 1)
                 copy))
             (aux (idx liters table)
               (cond ((zerop liters)
                      (prog1 1
                        (push table solutions)))
                     ((or (>= idx length) (< liters 0)) 0)
                     (t (+ (aux (1+ idx)
                                (- liters (aref containers idx))
                                (copy-and-mark table idx))
                           (aux (1+ idx) liters table))))))
      (aux 0 150 (make-array length :element-type 'bit :initial-element 0))
      (let ((min-containers length)
            (num-solutions 0))
        (dolist (solution solutions num-solutions)
          (let ((num-containers (reduce #'+ solution)))
            (cond ((< num-containers min-containers)
                   (setf min-containers num-containers
                         num-solutions 1))
                  ((= num-containers min-containers)
                   (incf num-solutions)))))))))
