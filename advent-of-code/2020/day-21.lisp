(uiop:define-package #:advent-of-code/2020/day-21
  (:use #:cl #:aoc-utils)
  (:export #:day-21/p1 #:day-21/p2))

(in-package #:advent-of-code/2020/day-21)

(defun read-foods ()
  (let ((foods (make-hash-table :test 'equal)))
    (mapc (lambda (line)
            (let* ((idx (position #\( line))
                   (ingredients (str->form (subseq line 0 idx)))
                   (allergens (cdr (read-from-string (remove #\, (subseq line idx))))))
              (setf (gethash ingredients foods) allergens)))
          (puzzle-file->lines "2020/data/21.txt"))
    foods))

(defun find-correspondence (foods)
  (let ((domains (make-hash-table)))
    (maphash (lambda (ingredients allergens)
               (dolist (ingredient ingredients)
                 (dolist (allergen allergens)
                   (pushnew ingredient (gethash allergen domains)))))
             foods)
    (labels ((constraint-check (allergen assignments)
               (let ((ingredient (gethash allergen assignments))
                     (assigned-ingredients (loop for key being the hash-keys of assignments
                                                   using (hash-value value)
                                                 collect value)))
                 (and (equal (remove-duplicates assigned-ingredients) assigned-ingredients)
                      (loop for ingredients being the hash-keys of foods
                              using (hash-value allergens)
                            always (or (null (member allergen allergens))
                                       (member ingredient ingredients)))))))
      (csp-backtracking (hash-table-keys domains)
                        (lambda (var) (gethash var domains))
                        #'constraint-check))))

(defun day-21/p1 ()
  (let* ((foods (read-foods))
         (assignments (find-correspondence foods))
         (all-ingredients (remove-duplicates (apply #'append (hash-table-keys foods))))
         (safe-ingredients (set-difference all-ingredients (hash-table-values assignments))))
    (loop for ingredients in (hash-table-keys foods)
          sum (count-if (lambda (ingredient)
                          (member ingredient safe-ingredients))
                        ingredients))))

(defun day-21/p2 ()
  (let* ((foods (read-foods))
         (assignments (find-correspondence foods))
         (sorted-allergens (sort (hash-table-keys assignments) #'string< :key #'string)))
    (format nil "~{~(~a~^,~)~}" (mapcar (lambda (allergen) (gethash allergen assignments))
                                        sorted-allergens))))
